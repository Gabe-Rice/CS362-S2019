Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:61.54% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:15.14% of 185
Branches executed:23.58% of 123
Taken at least once:8.94% of 123
Calls executed:15.69% of 51

Function 'tributeFunc'
Lines executed:0.00% of 32
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
Calls executed:0.00% of 3

Function 'minionFunc'
Lines executed:33.33% of 18
Branches executed:11.11% of 18
Taken at least once:5.56% of 18
Calls executed:16.67% of 6

Function 'mineFunc'
Lines executed:86.67% of 15
Branches executed:100.00% of 14
Taken at least once:57.14% of 14
Calls executed:100.00% of 5

Function 'smithyFunc'
Lines executed:80.00% of 5
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:50.00% of 2

Function 'adventurerFunc'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:10.53% of 57
Branches executed:100.00% of 28
Taken at least once:7.14% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:80.65% of 62
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:31.75% of 611
Branches executed:40.24% of 415
Taken at least once:22.65% of 415
Calls executed:27.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:47
        -:    0:Programs:43
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2010 returned 100% blocks executed 83%
     2010:    8:int compare(const void* a, const void* b) {
     2010:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     2010:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      536:   12:    return -1;
     1474:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 67 returned 100% blocks executed 83%
       67:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       67:   44:  SelectStream(1);
call    0 returned 100%
       67:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       67:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       67:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      737:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     7370:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     6700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       67:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       67:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       67:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       67:   89:      state->supplyCount[estate] = 8;
       67:   90:      state->supplyCount[duchy] = 8;
       67:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       67:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       67:  102:  state->supplyCount[silver] = 40;
       67:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1407:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    11055:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    10385:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      670:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      670:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      670:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     9715:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      201:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
      134:  140:      state->deckCount[i] = 0;
      536:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      402:  143:	  state->deck[i][j] = estate;
      402:  144:	  state->deckCount[i]++;
        -:  145:	}
     1072:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      938:  148:	  state->deck[i][j] = copper;
      938:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      201:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
      134:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      201:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      134:  166:      state->handCount[i] = 0;
      134:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1876:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     1809:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       67:  182:  state->outpostPlayed = 0;
       67:  183:  state->phase = 0;
       67:  184:  state->numActions = 1;
       67:  185:  state->numBuys = 1;
       67:  186:  state->playedCardCount = 0;
       67:  187:  state->whoseTurn = 0;
       67:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      402:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      335:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       67:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       67:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 162 returned 100% blocks executed 100%
      162:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      162:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      162:  209:  if (state->deckCount[player] < 1)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       28:  210:    return -1;
      134:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1608:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1340:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     1340:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1340:  217:    newDeckPos++;
     4690:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     3350:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1340:  221:    state->deckCount[player]--;
        -:  222:  }
     1474:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1340:  224:    state->deck[player][i] = newDeck[i];
     1340:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      134:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 1 returned 100% blocks executed 100%
        1:  320:int supplyCount(int card, struct gameState *state) {
        1:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 43 returned 100% blocks executed 100%
       43:  346:int whoseTurn(struct gameState *state) {
       43:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 504 returned 100% blocks executed 85%
      504:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      504:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       14:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       14:  538:    state->deckCount[player] = state->discardCount[player];
       14:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       14:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       14:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       14:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       14:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       14:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       14:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      490:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      490:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      490:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      490:  576:    state->deckCount[player]--;
      490:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      490:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 2 returned 100% blocks executed 13%
        2:  583:int getCost(int cardNumber)
        -:  584:{
        2:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 50%
branch  5 taken 50%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
    #####:  587:    case curse:
    #####:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
        1:  595:    case copper:
        1:  596:      return 0;
        1:  597:    case silver:
        1:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
    #####:  601:    case adventurer:
    #####:  602:      return 6;
    #####:  603:    case council_room:
    #####:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
    #####:  615:    case village:
    #####:  616:      return 3;
    #####:  617:    case baron:
    #####:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
        -:  648:
        -:  649:
function adventurerFunc called 15 returned 100% blocks executed 100%
       15:  650:void adventurerFunc(struct gameState *state, int currentPlayer)
        -:  651:{
       15:  652:	int drawntreasure=0;
        -:  653:	//int currentPlayer = whoseTurn(state);
        -:  654:	int cardDrawn;
        -:  655:	int temphand[MAX_HAND];
       15:  656:	int z = 0;
        -:  657:	
      101:  658:	while(drawntreasure<2){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       71:  659:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       14:  660:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -:  661:	}
       71:  662:	drawCard(currentPlayer, state);
call    0 returned 100%
       71:  663:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       71:  664:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       30:  665:	  drawntreasure++;
        -:  666:	else{
       41:  667:	  temphand[z]=cardDrawn;
       41:  668:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       41:  669:	  z++;
        -:  670:	}
        -:  671:      }
        -:  672:      //z-1>=0  //z+1>= -10000
   150101:  673:      while(z+1>= -10000){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   150071:  674:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   150071:  675:	z=z-1;
        -:  676:      }
        -:  677:      
       15:  678:}
        -:  679:
        -:  680:
function smithyFunc called 2 returned 100% blocks executed 67%
        2:  681:void smithyFunc(struct gameState *state, int currentPlayer, int handPos)
        -:  682:{
        -:  683:
        -:  684:  int i;
        -:  685:  //i = 0   i = 3
        2:  686:  for (i = 3; i < 3; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  687:	{
    #####:  688:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  689:	}
        -:  690:			
        -:  691:      //discard card from hand
        2:  692:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  693:}
        -:  694:
        -:  695:
function mineFunc called 3 returned 100% blocks executed 85%
        3:  696:int mineFunc(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -:  697:{
        -:  698:  int i, j;
        -:  699:
        3:  700:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  701:
        3:  702:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  703:	{
        2:  704:	  return -1;
        -:  705:	}
        -:  706:		
        1:  707:      if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  708:	{
    #####:  709:	  return -1;
        -:  710:	}
        -:  711:
        1:  712:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  713:	{
    #####:  714:	  return -1;
        -:  715:	}
        -:  716:
        1:  717:      gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  718:
        -:  719:      //discard card from hand
        1:  720:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  721:
        -:  722:      //discard trashed card
        1:  723:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  724:	{
        1:  725:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  726:	    {
        1:  727:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        1:  728:	      break;
        -:  729:	    }
        -:  730:	}
        1:  731:}
        -:  732:
        -:  733:
function minionFunc called 20 returned 100% blocks executed 17%
       20:  734:void minionFunc(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2)
        -:  735:{
        -:  736:  int i, j;
        -:  737:
       20:  738:  state->numActions++;
        -:  739:			
        -:  740:      //discard card from hand
       20:  741:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  742:			
       20:  743:      if (choice1)		//+ 2 coins  + 2000000
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  744:	{               
       20:  745:	  state->coins = state->coins + 2000000;
        -:  746:	}
        -:  747:			
    #####:  748:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  749:	{
        -:  750:	  //discard hand
    #####:  751:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  752:	    {
    #####:  753:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  754:	    }
        -:  755:				
        -:  756:	  //draw 4
    #####:  757:	  for (i = 0; i < 4; i)
branch  0 never executed
branch  1 never executed
        -:  758:	    {
    #####:  759:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  760:	    }
        -:  761:				
        -:  762:	  //other players discard hand and redraw if hand size > 4
    #####:  763:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  764:	    {
    #####:  765:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  766:		{
    #####:  767:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  768:		    {
        -:  769:		      //discard hand
    #####:  770:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  771:			{
    #####:  772:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  773:			}
        -:  774:							
        -:  775:		      //draw 4
    #####:  776:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  777:			{
    #####:  778:			  drawCard(i, state);
call    0 never executed
        -:  779:			}
        -:  780:		    }
        -:  781:		}
        -:  782:	    }
        -:  783:				
        -:  784:	}
       20:  785:}
        -:  786:
        -:  787:
function tributeFunc called 0 returned 0% blocks executed 0%
    #####:  788:tributeFunc(struct gameState *state, int nextPlayer, int currentPlayer)
        -:  789:{
        -:  790:  int i;
    #####:  791:  int tributeRevealedCards[2] = {-1, -1};
        -:  792:
        -:  793:
    #####:  794:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  795:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  796:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  797:	  state->deckCount[nextPlayer]--;
        -:  798:	}
    #####:  799:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  800:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  801:	  state->discardCount[nextPlayer]--;
        -:  802:	}
        -:  803:	else{
        -:  804:	  //No Card to Reveal
        -:  805:	  if (DEBUG){
        -:  806:	    printf("No cards to reveal\n");
        -:  807:	  }
        -:  808:	}
        -:  809:      }
        -:  810:	    
        -:  811:      else{
    #####:  812:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  813:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  814:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  815:	    state->deckCount[nextPlayer]++;
    #####:  816:	    state->discard[nextPlayer][i] = -1;
    #####:  817:	    state->discardCount[nextPlayer]--;
        -:  818:	  }
        -:  819:			    
    #####:  820:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  821:	} 
    #####:  822:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  823:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  824:	state->deckCount[nextPlayer]--;
    #####:  825:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  826:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  827:	state->deckCount[nextPlayer]--;
        -:  828:      }    
        -:  829:		       
    #####:  830:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  831:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  832:	state->playedCardCount++;
    #####:  833:	tributeRevealedCards[1] = -1;
        -:  834:      }
        -:  835:      //for (i = 0; i <= 2; i ++)
        -:  836:      for (;;){
    #####:  837:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  838:	  state->coins += 2;
        -:  839:	}
        -:  840:		    
    #####:  841:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  842:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  843:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  844:	}
        -:  845:	else{//Action Card
    #####:  846:	  state->numActions = state->numActions + 2;
        -:  847:	}
        -:  848:      }
        -:  849:}
        -:  850:
        -:  851:
        -:  852:
        -:  853:
function cardEffect called 43 returned 100% blocks executed 13%
       43:  854:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  855:{
        -:  856:  int i;
        -:  857:  int j;
        -:  858:  int k;
        -:  859:  int x;
        -:  860:  int index;
       43:  861:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       43:  862:  int nextPlayer = currentPlayer + 1;
        -:  863:
       43:  864:  int tributeRevealedCards[2] = {-1, -1};
        -:  865:  int temphand[MAX_HAND];// moved above the if statement
       43:  866:  int drawntreasure=0;
        -:  867:  int cardDrawn;
       43:  868:  int z = 0;// this is the counter for the temp hand
       43:  869:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  870:    nextPlayer = 0;
        -:  871:  }
        -:  872:  
        -:  873:	
        -:  874:	
        -:  875:  //uses switch to select card and perform actions
       43:  876:  switch( card ) 
branch  0 taken 35%
branch  1 taken 42%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 5%
branch  7 taken 19%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  877:    {
       15:  878:      case adventurer:
       15:  879:		    adventurerFunc(state, currentPlayer);
call    0 returned 100%
       15:  880:		    return 0;
        -:  881: /*   while(drawntreasure<2){
        -:  882:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  883:	  shuffle(currentPlayer, state);
        -:  884:	}
        -:  885:	drawCard(currentPlayer, state);
        -:  886:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  887:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  888:	  drawntreasure++;
        -:  889:	else{
        -:  890:	  temphand[z]=cardDrawn;
        -:  891:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  892:	  z++;
        -:  893:	}
        -:  894:      }
        -:  895:      while(z-1>=0){
        -:  896:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  897:	z=z-1;
        -:  898:      }
        -:  899:      return 0;  */
        -:  900:			
       18:  901:    case council_room:
        -:  902:      //+4 Cards
       90:  903:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  904:	{
       72:  905:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  906:	}
        -:  907:			
        -:  908:      //+1 Buy
       18:  909:      state->numBuys++;
        -:  910:			
        -:  911:      //Each other player draws a card
       54:  912:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  913:	{
       36:  914:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  915:	    {
       18:  916:	      drawCard(i, state);
call    0 returned 100%
        -:  917:	    }
        -:  918:	}
        -:  919:			
        -:  920:      //put played card in played card pile
       18:  921:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  922:			
       18:  923:      return 0;
        -:  924:			
    #####:  925:    case feast:
        -:  926:      //gain card with cost up to 5
        -:  927:      //Backup hand
    #####:  928:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  929:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  930:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  931:      }
        -:  932:      //Backup hand
        -:  933:
        -:  934:      //Update Coins for Buy
    #####:  935:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  936:      x = 1;//Condition to loop on
    #####:  937:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  938:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  939:	  if (DEBUG)
        -:  940:	    printf("None of that card left, sorry!\n");
        -:  941:
        -:  942:	  if (DEBUG){
        -:  943:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  944:	  }
        -:  945:	}
    #####:  946:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  947:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  948:
        -:  949:	  if (DEBUG){
        -:  950:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  951:	  }
        -:  952:	}
        -:  953:	else{
        -:  954:
        -:  955:	  if (DEBUG){
        -:  956:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  957:	  }
        -:  958:
    #####:  959:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  960:	  x = 0;//No more buying cards
        -:  961:
        -:  962:	  if (DEBUG){
        -:  963:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  964:	  }
        -:  965:
        -:  966:	}
        -:  967:      }     
        -:  968:
        -:  969:      //Reset Hand
    #####:  970:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  971:	state->hand[currentPlayer][i] = temphand[i];
    #####:  972:	temphand[i] = -1;
        -:  973:      }
        -:  974:      //Reset Hand
        -:  975:      			
    #####:  976:      return 0;
        -:  977:			
    #####:  978:    case gardens:
    #####:  979:      return -1;
        -:  980:			
        -:  981:
        -:  982:
    #####:  983:    case mine:
    #####:  984:      mineFunc(state, currentPlayer, handPos, choice1, choice2);
call    0 never executed
        -:  985:
    #####:  986:      return 0;
        -:  987:/*      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  988:
        -:  989:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  990:	{
        -:  991:	  return -1;
        -:  992:	}
        -:  993:		
        -:  994:      if (choice2 > treasure_map || choice2 < curse)
        -:  995:	{
        -:  996:	  return -1;
        -:  997:	}
        -:  998:
        -:  999:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1000:	{
        -: 1001:	  return -1;
        -: 1002:	}
        -: 1003:
        -: 1004:      gainCard(choice2, state, 2, currentPlayer);
        -: 1005:
        -: 1006:      //discard card from hand
        -: 1007:      discardCard(handPos, currentPlayer, state, 0);
        -: 1008:
        -: 1009:      //discard trashed card
        -: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1011:	{
        -: 1012:	  if (state->hand[currentPlayer][i] == j)
        -: 1013:	    {
        -: 1014:	      discardCard(i, currentPlayer, state, 0);			
        -: 1015:	      break;
        -: 1016:	    }
        -: 1017:	}
        -: 1018:			
        -: 1019:      return 0;
        -: 1020:			*/
        -: 1021:
    #####: 1022:    case remodel:
    #####: 1023:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1024:
    #####: 1025:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1026:	{
    #####: 1027:	  return -1;
        -: 1028:	}
        -: 1029:
    #####: 1030:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1031:
        -: 1032:      //discard card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1034:
        -: 1035:      //discard trashed card
    #####: 1036:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1037:	{
    #####: 1038:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1039:	    {
    #####: 1040:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1041:	      break;
        -: 1042:	    }
        -: 1043:	}
        -: 1044:
        -: 1045:
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:
        2: 1049:    case smithy:
        -: 1050:
        2: 1051:      smithyFunc(state, currentPlayer, handPos);
call    0 returned 100%
        -: 1052:
        2: 1053:      return 0;
        -: 1054:      //+3 Cards
        -: 1055:/*      for (i = 0; i < 3; i++)
        -: 1056:	{
        -: 1057:	  drawCard(currentPlayer, state);
        -: 1058:	}
        -: 1059:			
        -: 1060:      //discard card from hand
        -: 1061:      discardCard(handPos, currentPlayer, state, 0);
        -: 1062:      return 0;
        -: 1063:      */
        -: 1064:		
        8: 1065:    case village:
        -: 1066:      //+1 Card
        8: 1067:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1068:			
        -: 1069:      //+2 Actions
        8: 1070:      state->numActions = state->numActions + 2;
        -: 1071:			
        -: 1072:      //discard played card from hand
        8: 1073:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        8: 1074:      return 0;
        -: 1075:		
    #####: 1076:    case baron:
    #####: 1077:      state->numBuys++;//Increase buys by 1!
    #####: 1078:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1079:	int p = 0;//Iterator for hand!
    #####: 1080:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1081:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1082:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1083:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1084:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1085:	    state->discardCount[currentPlayer]++;
    #####: 1086:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1087:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1088:	    }
    #####: 1089:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1090:	    state->handCount[currentPlayer]--;
    #####: 1091:	    card_not_discarded = 0;//Exit the loop
        -: 1092:	  }
    #####: 1093:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1094:	    if(DEBUG) {
        -: 1095:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1096:	      printf("Must gain an estate if there are any\n");
        -: 1097:	    }
    #####: 1098:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1099:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1100:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1101:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1102:		isGameOver(state);
call    0 never executed
        -: 1103:	      }
        -: 1104:	    }
    #####: 1105:	    card_not_discarded = 0;//Exit the loop
        -: 1106:	  }
        -: 1107:			    
        -: 1108:	  else{
    #####: 1109:	    p++;//Next card
        -: 1110:	  }
        -: 1111:	}
        -: 1112:      }
        -: 1113:			    
        -: 1114:      else{
    #####: 1115:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1116:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1117:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1118:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1119:	    isGameOver(state);
call    0 never executed
        -: 1120:	  }
        -: 1121:	}
        -: 1122:      }
        -: 1123:	    
        -: 1124:      
    #####: 1125:      return 0;
        -: 1126:		
    #####: 1127:    case great_hall:
        -: 1128:      //+1 Card
    #####: 1129:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1130:			
        -: 1131:      //+1 Actions
    #####: 1132:      state->numActions++;
        -: 1133:			
        -: 1134:      //discard card from hand
    #####: 1135:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1136:      return 0;
        -: 1137:		
    #####: 1138:    case minion:
    #####: 1139:      minionFunc(state, handPos, currentPlayer, choice1, choice2);
call    0 never executed
    #####: 1140:      return 0;
        -: 1141:      //+1 action
        -: 1142:/*      state->numActions++;
        -: 1143:			
        -: 1144:      //discard card from hand
        -: 1145:      discardCard(handPos, currentPlayer, state, 0);
        -: 1146:			
        -: 1147:      if (choice1)		//+2 coins
        -: 1148:	{
        -: 1149:	  state->coins = state->coins + 2;
        -: 1150:	}
        -: 1151:			
        -: 1152:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1153:	{
        -: 1154:	  //discard hand
        -: 1155:	  while(numHandCards(state) > 0)
        -: 1156:	    {
        -: 1157:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1158:	    }
        -: 1159:				
        -: 1160:	  //draw 4
        -: 1161:	  for (i = 0; i < 4; i++)
        -: 1162:	    {
        -: 1163:	      drawCard(currentPlayer, state);
        -: 1164:	    }
        -: 1165:				
        -: 1166:	  //other players discard hand and redraw if hand size > 4
        -: 1167:	  for (i = 0; i < state->numPlayers; i++)
        -: 1168:	    {
        -: 1169:	      if (i != currentPlayer)
        -: 1170:		{
        -: 1171:		  if ( state->handCount[i] > 4 )
        -: 1172:		    {
        -: 1173:		      //discard hand
        -: 1174:		      while( state->handCount[i] > 0 )
        -: 1175:			{
        -: 1176:			  discardCard(handPos, i, state, 0);
        -: 1177:			}
        -: 1178:							
        -: 1179:		      //draw 4
        -: 1180:		      for (j = 0; j < 4; j++)
        -: 1181:			{
        -: 1182:			  drawCard(i, state);
        -: 1183:			}
        -: 1184:		    }
        -: 1185:		}
        -: 1186:	    }
        -: 1187:				
        -: 1188:	}
        -: 1189:      return 0;
        -: 1190:		*/
    #####: 1191:    case steward:
    #####: 1192:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
        -: 1194:	  //+2 cards
    #####: 1195:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1196:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1197:	}
    #####: 1198:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1199:	{
        -: 1200:	  //+2 coins
    #####: 1201:	  state->coins = state->coins + 2;
        -: 1202:	}
        -: 1203:      else
        -: 1204:	{
        -: 1205:	  //trash 2 cards in hand
    #####: 1206:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1207:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1208:	}
        -: 1209:			
        -: 1210:      //discard card from hand
    #####: 1211:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1212:      return 0;
        -: 1213:		
    #####: 1214:    case tribute:
    #####: 1215:      tributeFunc(state, nextPlayer, currentPlayer);
call    0 never executed
    #####: 1216:      return 0;
        -: 1217:/*      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -: 1218:	if (state->deckCount[nextPlayer] > 0){
        -: 1219:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1220:	  state->deckCount[nextPlayer]--;
        -: 1221:	}
        -: 1222:	else if (state->discardCount[nextPlayer] > 0){
        -: 1223:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1224:	  state->discardCount[nextPlayer]--;
        -: 1225:	}
        -: 1226:	else{
        -: 1227:	  //No Card to Reveal
        -: 1228:	  if (DEBUG){
        -: 1229:	    printf("No cards to reveal\n");
        -: 1230:	  }
        -: 1231:	}
        -: 1232:      }
        -: 1233:	    
        -: 1234:      else{
        -: 1235:	if (state->deckCount[nextPlayer] == 0){
        -: 1236:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -: 1237:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1238:	    state->deckCount[nextPlayer]++;
        -: 1239:	    state->discard[nextPlayer][i] = -1;
        -: 1240:	    state->discardCount[nextPlayer]--;
        -: 1241:	  }
        -: 1242:			    
        -: 1243:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1244:	} 
        -: 1245:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1246:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1247:	state->deckCount[nextPlayer]--;
        -: 1248:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1249:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1250:	state->deckCount[nextPlayer]--;
        -: 1251:      }    
        -: 1252:		       
        -: 1253:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -: 1254:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1255:	state->playedCardCount++;
        -: 1256:	tributeRevealedCards[1] = -1;
        -: 1257:      }
        -: 1258:
        -: 1259:      for (i = 0; i <= 2; i ++){
        -: 1260:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1261:	  state->coins += 2;
        -: 1262:	}
        -: 1263:		    
        -: 1264:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1265:	  drawCard(currentPlayer, state);
        -: 1266:	  drawCard(currentPlayer, state);
        -: 1267:	}
        -: 1268:	else{//Action Card
        -: 1269:	  state->numActions = state->numActions + 2;
        -: 1270:	}
        -: 1271:      }
        -: 1272:	    
        -: 1273:      return 0;
        -: 1274:		*/
    #####: 1275:    case ambassador:
    #####: 1276:      j = 0;		//used to check if player has enough cards to discard
        -: 1277:
    #####: 1278:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1279:	{
    #####: 1280:	  return -1;				
        -: 1281:	}
        -: 1282:
    #####: 1283:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1284:	{
    #####: 1285:	  return -1;
        -: 1286:	}
        -: 1287:
    #####: 1288:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1289:	{
    #####: 1290:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1291:	    {
    #####: 1292:	      j++;
        -: 1293:	    }
        -: 1294:	}
    #####: 1295:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1296:	{
    #####: 1297:	  return -1;				
        -: 1298:	}
        -: 1299:
        -: 1300:      if (DEBUG) 
        -: 1301:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1302:
        -: 1303:      //increase supply count for choosen card by amount being discarded
    #####: 1304:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1305:			
        -: 1306:      //each other player gains a copy of revealed card
    #####: 1307:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1308:	{
    #####: 1309:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1310:	    {
    #####: 1311:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1312:	    }
        -: 1313:	}
        -: 1314:
        -: 1315:      //discard played card from hand
    #####: 1316:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1317:
        -: 1318:      //trash copies of cards returned to supply
    #####: 1319:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1320:	{
    #####: 1321:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1322:	    {
    #####: 1323:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1324:		{
    #####: 1325:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1326:		  break;
        -: 1327:		}
        -: 1328:	    }
        -: 1329:	}			
        -: 1330:
    #####: 1331:      return 0;
        -: 1332:		
    #####: 1333:    case cutpurse:
        -: 1334:
    #####: 1335:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1336:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1337:	{
    #####: 1338:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1339:	    {
    #####: 1340:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1341:		{
    #####: 1342:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1343:		    {
    #####: 1344:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1345:		      break;
        -: 1346:		    }
    #####: 1347:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1348:		    {
    #####: 1349:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1350:			{
        -: 1351:			  if (DEBUG)
        -: 1352:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1353:			}	
    #####: 1354:		      break;
        -: 1355:		    }		
        -: 1356:		}
        -: 1357:					
        -: 1358:	    }
        -: 1359:				
        -: 1360:	}				
        -: 1361:
        -: 1362:      //discard played card from hand
    #####: 1363:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1364:
    #####: 1365:      return 0;
        -: 1366:
        -: 1367:		
    #####: 1368:    case embargo: 
        -: 1369:      //+2 Coins
    #####: 1370:      state->coins = state->coins + 2;
        -: 1371:			
        -: 1372:      //see if selected pile is in play
    #####: 1373:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1374:	{
    #####: 1375:	  return -1;
        -: 1376:	}
        -: 1377:			
        -: 1378:      //add embargo token to selected supply pile
    #####: 1379:      state->embargoTokens[choice1]++;
        -: 1380:			
        -: 1381:      //trash card
    #####: 1382:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1383:      return 0;
        -: 1384:		
    #####: 1385:    case outpost:
        -: 1386:      //set outpost flag
    #####: 1387:      state->outpostPlayed++;
        -: 1388:			
        -: 1389:      //discard card
    #####: 1390:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1391:      return 0;
        -: 1392:		
    #####: 1393:    case salvager:
        -: 1394:      //+1 buy
    #####: 1395:      state->numBuys++;
        -: 1396:			
    #####: 1397:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1398:	{
        -: 1399:	  //gain coins equal to trashed card
    #####: 1400:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1401:	  //trash card
    #####: 1402:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1403:	}
        -: 1404:			
        -: 1405:      //discard card
    #####: 1406:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1407:      return 0;
        -: 1408:		
    #####: 1409:    case sea_hag:
    #####: 1410:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1411:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1412:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1413:	  state->discardCount[i]++;
    #####: 1414:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1415:	}
        -: 1416:      }
    #####: 1417:      return 0;
        -: 1418:		
    #####: 1419:    case treasure_map:
        -: 1420:      //search hand for another treasure_map
    #####: 1421:      index = -1;
    #####: 1422:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1423:	{
    #####: 1424:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1425:	    {
    #####: 1426:	      index = i;
    #####: 1427:	      break;
        -: 1428:	    }
        -: 1429:	}
    #####: 1430:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1431:	{
        -: 1432:	  //trash both treasure cards
    #####: 1433:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1434:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1435:
        -: 1436:	  //gain 4 Gold cards
    #####: 1437:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1438:	    {
    #####: 1439:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1440:	    }
        -: 1441:				
        -: 1442:	  //return success
    #####: 1443:	  return 1;
        -: 1444:	}
        -: 1445:			
        -: 1446:      //no second treasure_map found in hand
    #####: 1447:      return -1;
        -: 1448:    }
        -: 1449:	
    #####: 1450:  return -1;
        -: 1451:}
        -: 1452:
function discardCard called 50 returned 100% blocks executed 78%
       50: 1453:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1454:{
        -: 1455:	
        -: 1456:  //if card is not trashed, added to Played pile 
       50: 1457:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1458:    {
        -: 1459:      //add card to played pile
       50: 1460:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       50: 1461:      state->playedCardCount++;
        -: 1462:    }
        -: 1463:	
        -: 1464:  //set played card to -1
       50: 1465:  state->hand[currentPlayer][handPos] = -1;
        -: 1466:	
        -: 1467:  //remove card from player's hand
       50: 1468:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1469:    {
        -: 1470:      //reduce number of cards in hand
    #####: 1471:      state->handCount[currentPlayer]--;
        -: 1472:    }
       50: 1473:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1474:    {
        -: 1475:      //reduce number of cards in hand
    #####: 1476:      state->handCount[currentPlayer]--;
        -: 1477:    }
        -: 1478:  else 	
        -: 1479:    {
        -: 1480:      //replace discarded card with last card in hand
       50: 1481:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1482:      //set last card to -1
       50: 1483:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1484:      //reduce number of cards in hand
       50: 1485:      state->handCount[currentPlayer]--;
        -: 1486:    }
        -: 1487:	
       50: 1488:  return 0;
        -: 1489:}
        -: 1490:
function gainCard called 1 returned 100% blocks executed 70%
        1: 1491:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1492:{
        -: 1493:  //Note: supplyPos is enum of choosen card
        -: 1494:	
        -: 1495:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1496:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1497:    {
    #####: 1498:      return -1;
        -: 1499:    }
        -: 1500:	
        -: 1501:  //added card for [whoseTurn] current player:
        -: 1502:  // toFlag = 0 : add to discard
        -: 1503:  // toFlag = 1 : add to deck
        -: 1504:  // toFlag = 2 : add to hand
        -: 1505:
        1: 1506:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1507:    {
    #####: 1508:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1509:      state->deckCount[player]++;
        -: 1510:    }
        1: 1511:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1512:    {
        1: 1513:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1514:      state->handCount[player]++;
        -: 1515:    }
        -: 1516:  else
        -: 1517:    {
    #####: 1518:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1519:      state->discardCount[player]++;
        -: 1520:    }
        -: 1521:	
        -: 1522:  //decrease number in supply pile
        1: 1523:  state->supplyCount[supplyPos]--;
        -: 1524:	 
        1: 1525:  return 0;
        -: 1526:}
        -: 1527:
function updateCoins called 67 returned 100% blocks executed 82%
       67: 1528:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1529:{
        -: 1530:  int i;
        -: 1531:	
        -: 1532:  //reset coin count
       67: 1533:  state->coins = 0;
        -: 1534:
        -: 1535:  //add coins for each Treasure card in player's hand
      402: 1536:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1537:    {
      335: 1538:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1539:	{
      268: 1540:	  state->coins += 1;
        -: 1541:	}
       67: 1542:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1543:	{
    #####: 1544:	  state->coins += 2;
        -: 1545:	}
       67: 1546:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1547:	{
    #####: 1548:	  state->coins += 3;
        -: 1549:	}	
        -: 1550:    }	
        -: 1551:
        -: 1552:  //add bonus
       67: 1553:  state->coins += bonus;
        -: 1554:
       67: 1555:  return 0;
        -: 1556:}
        -: 1557:
        -: 1558:
        -: 1559://end of dominion.c
        -: 1560:
